{
	"info": {
		"_postman_id": "64bd088a-fc54-4ad3-8b7f-ad41f8817eab",
		"name": "REQRESAPITEST",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GET METHODS",
			"item": [
				{
					"name": "GET ALL USERS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//console.log(responseData);",
									"var responseData=pm.response.json();",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Validate Content type \", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-type\")).to.include(\"application/json\");",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Validate object data keys\", function () {",
									"    pm.expect(responseData.page).to.eql(1);",
									"    pm.expect(responseData.per_page).to.eql(6);",
									"    pm.expect(responseData.total).to.eql(12);",
									"    pm.expect(responseData.total_pages).to.eql(2);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseuri}}/users",
							"host": [
								"{{baseuri}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET SINGLE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData=pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Validate Content type \", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-type\")).to.eql(\"application/json; charset=utf-8\");",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Status code name has OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"Validate ID\", function () {",
									"    pm.expect(responseData.data.id).to.eql(3);",
									"});",
									"pm.test(\"Validte Email\",function(){",
									"    pm.expect(responseData.data.email).to.eql(\"emma.wong@reqres.in\");",
									"});",
									"pm.test(\"Validate first name\",function(){",
									"     pm.expect(responseData.data.first_name).to.eql(\"Emma\");",
									"});",
									"pm.test(\"Validate last name\",function(){",
									"     pm.expect(responseData.data.last_name).to.eql(\"Wong\");",
									"});",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body(responseData);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseuri}}/users/3",
							"host": [
								"{{baseuri}}"
							],
							"path": [
								"users",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET NOT EXIST USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Status code name has Not Found\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseuri}}/users/23",
							"host": [
								"{{baseuri}}"
							],
							"path": [
								"users",
								"23"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "POST METHODS",
			"item": [
				{
					"name": "CREATE USER",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var randomName=\"adam\"+Math.random().toString(36).substr(2, 5);",
									"pm.variables.set(\"name\", randomName);",
									"pm.variables.set(\"job\", \"developer\");",
									"var randomId=Math.floor(Math.random()*200)+100;",
									"pm.variables.set(\"id\",randomId);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData=pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Validate Content type \", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-type\")).to.eql(\"application/json; charset=utf-8\");",
									"});",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"pm.test(\"Status code name has OK\", function () {",
									"    pm.response.to.have.status(\"Created\");",
									"});",
									"pm.test(\"Validate Name\",function(){",
									"    pm.expect(responseData.name).to.eql(pm.variables.get(\"name\"));",
									"});",
									"pm.test(\"Validate job\",function(){",
									"    pm.expect(responseData.job).to.eql(pm.variables.get(\"job\"));",
									"})",
									"pm.test(\"Validate ID\",function(){",
									"    pm.expect(responseData.id).to.eql(pm.variables.get(\"id\"));",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{name}}\",\n    \"job\": \"{{job}}\",\n    \"id\":{{id}},\n    \"support\":\"not\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseuri}}/users",
							"host": [
								"{{baseuri}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "REGISTER SUCCESSFULLY",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"pistol\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseuri}}/register",
							"host": [
								"{{baseuri}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PUT METHODS",
			"item": [
				{
					"name": "UPDATE USER INFO",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Khabib\",\n    \"job\": \"Fighter\",\n    \"ufc title\":\"Champion\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseuri}}/users/2",
							"host": [
								"{{baseuri}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DELETE METHODS",
			"item": [
				{
					"name": "DELETE USER",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseuri}}/users/23",
							"host": [
								"{{baseuri}}"
							],
							"path": [
								"users",
								"23"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PATCH METHODS",
			"item": [
				{
					"name": "UPDATE PART OF THE OBJECT",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "id",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Khabib\",\n    \"last name\":\"Nurmagomedov\",\n    \"job\": \"Fighter\",\n    \"ufc title\":\"Champion\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseuri}}/users/1",
							"host": [
								"{{baseuri}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseuri",
			"value": "https://reqres.in/api"
		},
		{
			"key": "name",
			"value": "adam"
		}
	]
}